'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

require('colors');

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _db = require('./db');

var _db2 = _interopRequireDefault(_db);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MigrationModel = void 0;

_bluebird2.default.config({
  warnings: false
});

var es6Template = '\n/**\n * Make any changes you need to make to the database here\n */\nexport async function up () {\n  // Write migration here\n}\n\n/**\n * Make any changes that UNDO the up function side effects here (if possible)\n */\nexport async function down () {\n  // Write migration here\n}\n';

var es5Template = '\'use strict\';\n\n/**\n * Make any changes you need to make to the database here\n */\nexports.up = function up (done) {\n  done();\n};\n\n/**\n * Make any changes that UNDO the up function side effects here (if possible)\n */\nexports.down = function down(done) {\n  done();\n};\n';

var Migrator = function () {
  function Migrator(_ref) {
    var templatePath = _ref.templatePath,
        _ref$migrationsPath = _ref.migrationsPath,
        migrationsPath = _ref$migrationsPath === undefined ? './migrations' : _ref$migrationsPath,
        dbConnectionUri = _ref.dbConnectionUri,
        _ref$es6Templates = _ref.es6Templates,
        es6Templates = _ref$es6Templates === undefined ? false : _ref$es6Templates,
        _ref$collectionName = _ref.collectionName,
        collectionName = _ref$collectionName === undefined ? 'migrations' : _ref$collectionName,
        _ref$autosync = _ref.autosync,
        autosync = _ref$autosync === undefined ? false : _ref$autosync,
        _ref$cli = _ref.cli,
        cli = _ref$cli === undefined ? false : _ref$cli,
        connection = _ref.connection;
    (0, _classCallCheck3.default)(this, Migrator);

    var defaultTemplate = es6Templates ? es6Template : es5Template;
    this.template = templatePath ? _fs2.default.readFileSync(templatePath, 'utf-8') : defaultTemplate;
    this.migrationPath = _path2.default.resolve(migrationsPath);
    this.connection = connection || _mongoose2.default.createConnection(dbConnectionUri);
    this.es6 = es6Templates;
    this.collection = collectionName;
    this.autosync = autosync;
    this.cli = cli;
    MigrationModel = (0, _db2.default)(collectionName, this.connection);
  }

  (0, _createClass3.default)(Migrator, [{
    key: 'log',
    value: function log(logString) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (force || this.cli) {
        console.log(logString);
      }
    }

    /**
     * Use your own Mongoose connection object (so you can use this('modelname')
     * @param {mongoose.connection} connection - Mongoose connection
     */

  }, {
    key: 'setMongooseConnection',
    value: function setMongooseConnection(connection) {
      MigrationModel = (0, _db2.default)(this.collection, connection);
    }

    /**
     * Close the underlying connection to mongo
     * @returns {Promise} A promise that resolves when connection is closed
     */

  }, {
    key: 'close',
    value: function close() {
      return this.connection ? this.connection.close() : _bluebird2.default.resolve();
    }

    /**
     * Create a new migration
     * @param {string} migrationName
     * @returns {Promise<Object>} A promise of the Migration created
     */

  }, {
    key: 'create',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(migrationName) {
        var existingMigration, now, newMigrationFile, migrationCreated;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return MigrationModel.findOne({ name: migrationName });

              case 3:
                existingMigration = _context.sent;

                if (!existingMigration) {
                  _context.next = 6;
                  break;
                }

                throw new Error(('There is already a migration with name \'' + migrationName + '\' in the database').red);

              case 6:
                _context.next = 8;
                return this.sync();

              case 8:
                now = Date.now();
                newMigrationFile = now + '-' + migrationName + '.js';

                _mkdirp2.default.sync(this.migrationPath);
                _fs2.default.writeFileSync(_path2.default.join(this.migrationPath, newMigrationFile), this.template);
                // create instance in db
                _context.next = 14;
                return this.connection;

              case 14:
                _context.next = 16;
                return MigrationModel.create({
                  name: migrationName,
                  createdAt: now
                });

              case 16:
                migrationCreated = _context.sent;

                this.log('Created migration ' + migrationName + ' in ' + this.migrationPath + '.');
                return _context.abrupt('return', migrationCreated);

              case 21:
                _context.prev = 21;
                _context.t0 = _context['catch'](0);

                this.log(_context.t0.stack);
                fileRequired(_context.t0);

              case 25:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 21]]);
      }));

      function create(_x2) {
        return _ref2.apply(this, arguments);
      }

      return create;
    }()

    /**
     * Runs migrations up to or down to a given migration name
     *
     * @param migrationName
     * @param direction
     */

  }, {
    key: 'run',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
        var _this = this;

        var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'up';
        var migrationName = arguments[1];

        var untilMigration, query, sortDirection, migrationsToRun, self, numMigrationsRan, migrationsRan, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

        return _regenerator2.default.wrap(function _callee2$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.sync();

              case 2:
                if (!migrationName) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 5;
                return MigrationModel.findOne({ name: migrationName });

              case 5:
                _context3.t0 = _context3.sent;
                _context3.next = 11;
                break;

              case 8:
                _context3.next = 10;
                return MigrationModel.findOne().sort({ createdAt: -1 });

              case 10:
                _context3.t0 = _context3.sent;

              case 11:
                untilMigration = _context3.t0;

                if (untilMigration) {
                  _context3.next = 18;
                  break;
                }

                if (!migrationName) {
                  _context3.next = 17;
                  break;
                }

                throw new ReferenceError("Could not find that migration in the database");

              case 17:
                throw new Error("There are no pending migrations.");

              case 18:
                query = {
                  createdAt: { $lte: untilMigration.createdAt },
                  state: 'down'
                };


                if (direction == 'down') {
                  query = {
                    createdAt: { $gte: untilMigration.createdAt },
                    state: 'up'
                  };
                }

                sortDirection = direction == 'up' ? 1 : -1;
                _context3.next = 23;
                return MigrationModel.find(query).sort({ createdAt: sortDirection });

              case 23:
                migrationsToRun = _context3.sent;

                if (migrationsToRun.length) {
                  _context3.next = 31;
                  break;
                }

                if (!this.cli) {
                  _context3.next = 30;
                  break;
                }

                this.log('There are no migrations to run'.yellow);
                this.log('Current Migrations\' Statuses: ');
                _context3.next = 30;
                return this.list();

              case 30:
                throw new Error('There are no migrations to run');

              case 31:
                self = this;
                numMigrationsRan = 0;
                migrationsRan = [];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context3.prev = 37;
                _loop = _regenerator2.default.mark(function _loop() {
                  var migration, migrationFilePath, migrationFunctions;
                  return _regenerator2.default.wrap(function _loop$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          migration = _step.value;
                          migrationFilePath = _path2.default.join(self.migrationPath, migration.filename);

                          if (_this.es6) {
                            require('babel-register')({
                              "presets": [require("babel-preset-latest")],
                              "plugins": [require("babel-plugin-transform-runtime")]
                            });

                            require('babel-polyfill');
                          }

                          migrationFunctions = void 0;
                          _context2.prev = 4;

                          migrationFunctions = require(migrationFilePath);
                          _context2.next = 12;
                          break;

                        case 8:
                          _context2.prev = 8;
                          _context2.t0 = _context2['catch'](4);

                          _context2.t0.message = _context2.t0.message && /Unexpected token/.test(_context2.t0.message) ? 'Unexpected Token when parsing migration. If you are using an ES6 migration file, use option --es6' : _context2.t0.message;
                          throw _context2.t0;

                        case 12:
                          if (migrationFunctions[direction]) {
                            _context2.next = 14;
                            break;
                          }

                          throw new Error(('The ' + direction + ' export is not defined in ' + migration.filename + '.').red);

                        case 14:
                          _context2.prev = 14;
                          _context2.next = 17;
                          return new _bluebird2.default(function (resolve, reject) {
                            var callPromise = migrationFunctions[direction].call(_this.connection.model.bind(_this.connection), function callback(err) {
                              if (err) return reject(err);
                              resolve();
                            });

                            if (callPromise && typeof callPromise.then === 'function') {
                              callPromise.then(resolve).catch(reject);
                            }
                          });

                        case 17:

                          _this.log((direction.toUpperCase() + ':   ')[direction == 'up' ? 'green' : 'red'] + (' ' + migration.filename + ' '));

                          _context2.next = 20;
                          return MigrationModel.where({ name: migration.name }).update({ $set: { state: direction } });

                        case 20:
                          migrationsRan.push(migration.toJSON());
                          numMigrationsRan++;
                          _context2.next = 29;
                          break;

                        case 24:
                          _context2.prev = 24;
                          _context2.t1 = _context2['catch'](14);

                          _this.log(('Failed to run migration ' + migration.name + ' due to an error.').red);
                          _this.log('Not continuing. Make sure your data is in consistent state'.red);
                          throw _context2.t1 instanceof Error ? _context2.t1 : new Error(_context2.t1);

                        case 29:
                        case 'end':
                          return _context2.stop();
                      }
                    }
                  }, _loop, _this, [[4, 8], [14, 24]]);
                });
                _iterator = (0, _getIterator3.default)(migrationsToRun);

              case 40:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context3.next = 45;
                  break;
                }

                return _context3.delegateYield(_loop(), 't1', 42);

              case 42:
                _iteratorNormalCompletion = true;
                _context3.next = 40;
                break;

              case 45:
                _context3.next = 51;
                break;

              case 47:
                _context3.prev = 47;
                _context3.t2 = _context3['catch'](37);
                _didIteratorError = true;
                _iteratorError = _context3.t2;

              case 51:
                _context3.prev = 51;
                _context3.prev = 52;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 54:
                _context3.prev = 54;

                if (!_didIteratorError) {
                  _context3.next = 57;
                  break;
                }

                throw _iteratorError;

              case 57:
                return _context3.finish(54);

              case 58:
                return _context3.finish(51);

              case 59:

                if (migrationsToRun.length == numMigrationsRan) this.log('All migrations finished successfully.'.green);
                return _context3.abrupt('return', migrationsRan);

              case 61:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee2, this, [[37, 47, 51, 59], [52,, 54, 58]]);
      }));

      function run() {
        return _ref3.apply(this, arguments);
      }

      return run;
    }()

    /**
     * Looks at the file system migrations and imports any migrations that are
     * on the file system but missing in the database into the database
     *
     * This functionality is opposite of prune()
     */

  }, {
    key: 'sync',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
        var _this2 = this;

        var _ret2;

        return _regenerator2.default.wrap(function _callee5$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                return _context6.delegateYield(_regenerator2.default.mark(function _callee4() {
                  var filesInMigrationFolder, migrationsInDatabase, migrationsInFolder, filesNotInDb, migrationsToImport, answers;
                  return _regenerator2.default.wrap(function _callee4$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          filesInMigrationFolder = _fs2.default.readdirSync(_this2.migrationPath);
                          _context5.next = 3;
                          return MigrationModel.find({});

                        case 3:
                          migrationsInDatabase = _context5.sent;

                          // Go over migrations in folder and delete any files not in DB
                          migrationsInFolder = _lodash2.default.filter(filesInMigrationFolder, function (file) {
                            return (/\d{13,}\-.+.js$/.test(file)
                            );
                          }).map(function (filename) {
                            var fileCreatedAt = parseInt(filename.split('-')[0]);
                            var existsInDatabase = migrationsInDatabase.some(function (m) {
                              return filename == m.filename;
                            });
                            return { createdAt: fileCreatedAt, filename: filename, existsInDatabase: existsInDatabase };
                          });
                          filesNotInDb = _lodash2.default.filter(migrationsInFolder, { existsInDatabase: false }).map(function (f) {
                            return f.filename;
                          });
                          migrationsToImport = filesNotInDb;

                          _this2.log('Synchronizing database with file system migrations...');

                          if (!(!_this2.autosync && migrationsToImport.length)) {
                            _context5.next = 13;
                            break;
                          }

                          _context5.next = 11;
                          return new _bluebird2.default(function (resolve) {
                            _inquirer2.default.prompt({
                              type: 'checkbox',
                              message: 'The following migrations exist in the migrations folder but not in the database. Select the ones you want to import into the database',
                              name: 'migrationsToImport',
                              choices: filesNotInDb
                            }, function (answers) {
                              resolve(answers);
                            });
                          });

                        case 11:
                          answers = _context5.sent;


                          migrationsToImport = answers.migrationsToImport;

                        case 13:
                          return _context5.abrupt('return', {
                            v: _bluebird2.default.map(migrationsToImport, function () {
                              var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(migrationToImport) {
                                var filePath, timestampSeparatorIndex, timestamp, migrationName, createdMigration;
                                return _regenerator2.default.wrap(function _callee3$(_context4) {
                                  while (1) {
                                    switch (_context4.prev = _context4.next) {
                                      case 0:
                                        filePath = _path2.default.join(_this2.migrationPath, migrationToImport), timestampSeparatorIndex = migrationToImport.indexOf('-'), timestamp = migrationToImport.slice(0, timestampSeparatorIndex), migrationName = migrationToImport.slice(timestampSeparatorIndex + 1, migrationToImport.lastIndexOf('.'));


                                        _this2.log('Adding migration ' + filePath + ' into database from file system. State is ' + 'DOWN'.red);
                                        _context4.next = 4;
                                        return MigrationModel.create({
                                          name: migrationName,
                                          createdAt: timestamp
                                        });

                                      case 4:
                                        createdMigration = _context4.sent;
                                        return _context4.abrupt('return', createdMigration.toJSON());

                                      case 6:
                                      case 'end':
                                        return _context4.stop();
                                    }
                                  }
                                }, _callee3, _this2);
                              }));

                              return function (_x4) {
                                return _ref5.apply(this, arguments);
                              };
                            }())
                          });

                        case 14:
                        case 'end':
                          return _context5.stop();
                      }
                    }
                  }, _callee4, _this2);
                })(), 't0', 2);

              case 2:
                _ret2 = _context6.t0;

                if (!((typeof _ret2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret2)) === "object")) {
                  _context6.next = 5;
                  break;
                }

                return _context6.abrupt('return', _ret2.v);

              case 5:
                _context6.next = 11;
                break;

              case 7:
                _context6.prev = 7;
                _context6.t1 = _context6['catch'](0);

                this.log('Could not synchronise migrations in the migrations folder up to the database.'.red);
                throw _context6.t1;

              case 11:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee5, this, [[0, 7]]);
      }));

      function sync() {
        return _ref4.apply(this, arguments);
      }

      return sync;
    }()

    /**
     * Opposite of sync().
     * Removes files in migration directory which don't exist in database.
     */

  }, {
    key: 'prune',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
        var _this3 = this;

        var _ret3;

        return _regenerator2.default.wrap(function _callee7$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                return _context8.delegateYield(_regenerator2.default.mark(function _callee6() {
                  var filesInMigrationFolder, migrationsInDatabase, migrationsInFolder, dbMigrationsNotOnFs, migrationsToDelete, answers, migrationsToDeleteDocs;
                  return _regenerator2.default.wrap(function _callee6$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          filesInMigrationFolder = _fs2.default.readdirSync(_this3.migrationPath);
                          _context7.next = 3;
                          return MigrationModel.find({});

                        case 3:
                          migrationsInDatabase = _context7.sent;

                          // Go over migrations in folder and delete any files not in DB
                          migrationsInFolder = _lodash2.default.filter(filesInMigrationFolder, function (file) {
                            return (/\d{13,}\-.+.js/.test(file)
                            );
                          }).map(function (filename) {
                            var fileCreatedAt = parseInt(filename.split('-')[0]);
                            var existsInDatabase = migrationsInDatabase.some(function (m) {
                              return filename == m.filename;
                            });
                            return { createdAt: fileCreatedAt, filename: filename, existsInDatabase: existsInDatabase };
                          });
                          dbMigrationsNotOnFs = _lodash2.default.filter(migrationsInDatabase, function (m) {
                            return !_lodash2.default.find(migrationsInFolder, { filename: m.filename });
                          });
                          migrationsToDelete = dbMigrationsNotOnFs.map(function (m) {
                            return m.name;
                          });

                          if (!(!_this3.autosync && !!migrationsToDelete.length)) {
                            _context7.next = 12;
                            break;
                          }

                          _context7.next = 10;
                          return new _bluebird2.default(function (resolve) {
                            _inquirer2.default.prompt({
                              type: 'checkbox',
                              message: 'The following migrations exist in the database but not in the migrations folder. Select the ones you want to remove from the file system.',
                              name: 'migrationsToDelete',
                              choices: migrationsToDelete
                            }, function (answers) {
                              resolve(answers);
                            });
                          });

                        case 10:
                          answers = _context7.sent;


                          migrationsToDelete = answers.migrationsToDelete;

                        case 12:
                          _context7.next = 14;
                          return MigrationModel.find({
                            name: { $in: migrationsToDelete }
                          }).lean();

                        case 14:
                          migrationsToDeleteDocs = _context7.sent;

                          if (!migrationsToDelete.length) {
                            _context7.next = 19;
                            break;
                          }

                          _this3.log('Removing migration(s) ', ('' + migrationsToDelete.join(', ')).cyan, ' from database');
                          _context7.next = 19;
                          return MigrationModel.remove({
                            name: { $in: migrationsToDelete }
                          });

                        case 19:
                          return _context7.abrupt('return', {
                            v: migrationsToDeleteDocs
                          });

                        case 20:
                        case 'end':
                          return _context7.stop();
                      }
                    }
                  }, _callee6, _this3);
                })(), 't0', 2);

              case 2:
                _ret3 = _context8.t0;

                if (!((typeof _ret3 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret3)) === "object")) {
                  _context8.next = 5;
                  break;
                }

                return _context8.abrupt('return', _ret3.v);

              case 5:
                _context8.next = 11;
                break;

              case 7:
                _context8.prev = 7;
                _context8.t1 = _context8['catch'](0);

                this.log('Could not prune extraneous migrations from database.'.red);
                throw _context8.t1;

              case 11:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee7, this, [[0, 7]]);
      }));

      function prune() {
        return _ref6.apply(this, arguments);
      }

      return prune;
    }()

    /**
     * Lists the current migrations and their statuses
     * @returns {Promise<Array<Object>>}
     * @example
     *   [
     *    { name: 'my-migration', filename: '149213223424_my-migration.js', state: 'up' },
     *    { name: 'add-cows', filename: '149213223453_add-cows.js', state: 'down' }
     *   ]
     */

  }, {
    key: 'list',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
        var _this4 = this;

        var migrations;
        return _regenerator2.default.wrap(function _callee8$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.sync();

              case 2:
                _context9.next = 4;
                return MigrationModel.find().sort({ createdAt: 1 });

              case 4:
                migrations = _context9.sent;

                if (!migrations.length) this.log('There are no migrations to list.'.yellow);
                return _context9.abrupt('return', migrations.map(function (m) {
                  _this4.log(('' + (m.state == 'up' ? 'UP:  \t' : 'DOWN:\t'))[m.state == 'up' ? 'green' : 'red'] + (' ' + m.filename));
                  return m.toJSON();
                }));

              case 7:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee8, this);
      }));

      function list() {
        return _ref7.apply(this, arguments);
      }

      return list;
    }()
  }]);
  return Migrator;
}();

exports.default = Migrator;


function fileRequired(error) {
  if (error && error.code == 'ENOENT') {
    throw new ReferenceError('Could not find any files at path \'' + error.path + '\'');
  }
}

module.exports = Migrator;
//# sourceMappingURL=data:application/json;base64,